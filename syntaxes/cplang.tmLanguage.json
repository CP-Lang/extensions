{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CP",
  "patterns": [
    {
      "name": "keyword.control.cplang",
      "match": "\\b(if|else|while|do|for|foreach|switch|case|break|default|continue|const|var|fun|return|try|catch|throw|struct)\\b"
    },
    {
      "match": "\\b(namespace|as namespace|using)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
      "captures": {
        "1": {
          "name": "keyword.control.cplang"
        },
        "2": {
          "name": "entity.name.namespace.cplang"
        }
      }
    },
    {
      "name": "storage.type.cplang",
      "match": "\\b(bool|int|float|char|string|any)\\b"
    },
    {
      "name": "constant.language.cplang",
      "match": "\\b(true|false|null)\\b"
    },
    {
      "name": "constant.language.cplang",
      "match": "\\b(not|and|or|in|ref|unref)\\b"
    },
    { "include": "#numbers" },
    { "include": "#structs" },
    {
      "name": "entity.name.function.cplang",
      "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\s*(?=\\()"
    },
    { "include": "#variables" },
    { "include": "#strings" },
    {
      "name": "string.quoted.backtick.cplang",
      "begin": "`",
      "end": "`",
      "patterns": [
        {
          "name": "constant.character.escape.cplang",
          "match": "\\\\."
        },
        {
          "name": "constant.character",
          "begin": "\\$\\{",
          "end": "\\}",
          "patterns": [{ "include": "#operators" }, { "include": "#variables" }, { "include": "#strings" }, { "include": "#numbers" }, { "include": "#keywords" }]
        },
        {
          "match": "[^\\`\\$]+",
          "name": "string.quoted.backtick.cplang"
        }
      ]
    },
    { "include": "#operators" },
    {
      "name": "comment.line.double-slash.cplang",
      "match": "\\/\\/.*$"
    },
    {
      "name": "comment.block.cplang",
      "begin": "\\/\\*",
      "end": "\\*\\/",
      "patterns": [
        {
          "name": "constant.character.escape.cplang",
          "match": "\\\\."
        }
      ]
    }
  ],
  "repository": {
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.cplang",
          "match": "\\b(\\+|\\-|\\*|\\/|%|\\/%|\\*\\*|\\^|\\&|\\||~|<<|>>|==|!=|<|>|<=|>=|<=>|\\+\\+|\\-\\-|\\?|:|::|=)\\b"
        }
      ]
    },
    "structs": {
      "patterns": [
        {
          "name": "entity.name.class.cplang",
          "patterns": [
            {
              "match": "\\bstruct\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
              "captures": {
                "1": {
                  "name": "entity.name.class.cplang"
                }
              }
            },
            {
              "match": "(?<=\\bvar\\s+[_a-zA-Z][_a-zA-Z0-9]*\\s*:\\s*)\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
              "name": "entity.name.class.cplang"
            },
            {
              "match": "\\b([_a-zA-Z][_a-zA-Z0-9]*)\\b(?=\\s*\\{)",
              "name": "entity.name.class.cplang"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.cplang",
          "match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.single.cplang",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.cplang",
              "match": "\\\\."
            },
            {
              "match": "[^\\\\']",
              "name": "string.quoted.single.cplang"
            }
          ]
        },
        {
          "name": "string.quoted.double.cplang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.cplang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.cplang",
          "patterns": [
            {
              "name": "constant.numeric.integer.cplang",
              "match": "\\b([0-9]+[fF]?|0b[01]+|0o[0-7]+|0d[0-9]+|0x[0-9a-fA-F]+)\\b"
            },
            {
              "name": "constant.numeric.float.cplang",
              "match": "\\b([0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fF]?|[0-9]+([eE][+-]?[0-9]+)[fF]?)\\b"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.cp"
}
